{"version":3,"sources":["DrawArray.tsx","BubbleSort.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrawArray","props","array","a","b","done","end","heading","out","map","v","i","bgc","style","margin","padding","backgroundColor","display","Container","fluid","Row","Col","bubbleSortInit","size","original","Array","fill","_","Math","floor","random","j","compareI","compareJ","comparisons","swaps","BubbleSort","useState","inputSize","setInputSize","state","setState","useEffect","id","setTimeout","clearTimeout","reduce","c","Infinity","isSorted","bubbleSortStep","Jumbotron","href","className","Form","Group","controlId","Label","Control","type","value","min","max","onChange","e","parseInt","target","App","Navbar","bg","variant","Brand","Nav","Link","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5292438.chunk.js","sourcesContent":["import {Col, Container, Row} from \"react-bootstrap\";\nimport React from \"react\";\n\ninterface IDrawArray {\n    array: number[]\n    a: number\n    b: number\n    done: boolean\n    heading?: string\n    end?: boolean\n}\n\nfunction DrawArray(props: IDrawArray) {\n    const {array, a, b, done, end = false, heading} = props;\n    const out = array.map((v: number, i: number) => {\n        const bgc = i === a || i === b ? \"#f00\" : \"#ddd\";\n        return (<span key={i} style={{\n            margin: \"0.5em\",\n            padding: \"1em\",\n            backgroundColor: bgc,\n            display: \"inline-block\"\n        }}>{v}</span>);\n    });\n    return (\n        <Container fluid>\n            <Row>\n                <Col><h3>{heading}</h3></Col>\n            </Row>\n\n            <Col>\n                <>\n                    {out}\n                </>\n            </Col>\n            <Row>\n                <Col>\n                    {done && !end ? <span style={{\n                        margin: \"0.5em\",\n                        padding: \"1em\",\n                        backgroundColor: \"green\",\n                        display: \"inline-block\"\n                    }}>Done!</span> : ''}\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default DrawArray;","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Container, Row, Col, Form, Jumbotron, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DrawArray from \"./DrawArray\";\n\ninterface IBubbleSortState {\n    original: number[]\n    array: number[]\n    i: number\n    j: number\n    compareI: number\n    compareJ: number\n    comparisons: number\n    swaps: number\n    done: boolean\n    size: number\n}\n\nfunction bubbleSortInit(size: number = 10): IBubbleSortState {\n    const original = Array(size).fill(0).map(_ => Math.floor(Math.random() * 100));\n    return {\n        original,\n        array: original.map((i: number) => i),\n        i: 0,\n        j: 1,\n        compareI: 0,\n        compareJ: 1,\n        comparisons: 0,\n        swaps: 0,\n        done: false,\n        size: size\n    };\n}\n\nfunction isSorted(array: number[]) {\n    return array.reduce((a: boolean, c: number, i: number) => a && c < (array[i + 1] || Infinity), true);\n}\n\nfunction bubbleSortStep(state: IBubbleSortState): IBubbleSortState {\n    let {array, i, j, compareI, compareJ, comparisons, swaps, original, size} = state;\n\n    if (compareJ > size - 1) {\n        compareI = 0;\n        compareJ = 1;\n        i++;\n    }\n\n    const a = array[compareI];\n    const b = array[compareJ];\n    if (a > b) {\n        swaps++;\n        array[compareI] = b;\n        array[compareJ] = a;\n    }\n    comparisons++;\n    compareI++;\n    compareJ++;\n\n    // bails out quicker. Not a real bubble sort. Watching bubble sort is punishment.\n    let done = isSorted(array) || i > size;\n    if (done) {\n        compareI = -1;\n        compareJ = -1;\n    }\n    return {...state, array, i, j, compareI, compareJ, comparisons, swaps, done, original};\n}\n\nfunction BubbleSort() {\n    const [inputSize, setInputSize] = useState(5);\n    const [state, setState] = useState(bubbleSortInit(inputSize));\n\n    useEffect(() => {\n        const id = setTimeout(() => {\n            if (state.done) {\n                clearTimeout(id);\n            } else {\n                setState(bubbleSortStep(state));\n            }\n\n        }, 500);\n        return () => clearTimeout(id);\n    });\n\n    function updateRange(value: number) {\n        setInputSize(value);\n        setState(bubbleSortInit(value));\n    }\n\n    return (\n\n        <>\n            <Jumbotron>\n                <h1>Bubble sort</h1>\n                <p>Use the range slider to increase/decrease the number of numbers in bubble sort visualisation.</p>\n\n                <p>\n                    <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Learn more about bubble sort</a>\n                </p>\n            </Jumbotron>\n\n            <Row>\n                <Col className=\"col-md-3\">\n                    <Form>\n                        <Form.Group controlId=\"formBasicRange\">\n                            <Form.Label>Range (5-25)</Form.Label>\n                            <Form.Control type=\"range\" value={inputSize} min={5} max={25}\n                                          onChange={(e: ChangeEvent<HTMLInputElement>) => updateRange(parseInt(e.target.value))}/>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <DrawArray\n                        array={state.original}\n                        a={-1} b={-1}\n                        done={state.done}\n                        heading={\"Initial state of the array\"}\n                        end={true}/>\n                    <hr/>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <DrawArray array={state.array} a={state.compareI - 1} b={state.compareJ - 1} done={state.done}\n                               heading={\"Working\"}/>\n                </Col>\n            </Row>\n        </>\n\n    );\n}\n\nexport default BubbleSort;\n\n\n","import React from 'react';\nimport {Container, Row, Col, Nav, FormControl, Form, Navbar, Button, Jumbotron} from 'react-bootstrap';\nimport BubbleSort from \"./BubbleSort\";\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router>\n            <Container fluid className=\"App\">\n                <Row>\n                    <Col>\n                        <Navbar bg=\"danger\" variant=\"dark\">\n                            <Navbar.Brand href=\"/\">Sorting visualisations</Navbar.Brand>\n                            <Nav className=\"mr-auto\">\n                                <Nav.Link href=\"/bubble\">Bubble</Nav.Link>\n                                {/*<Nav.Link href=\"/selection\">Selection</Nav.Link>*/}\n                                {/*<Nav.Link href=\"/insertion\">Insertion</Nav.Link>*/}\n                            </Nav>\n                        </Navbar>\n                    </Col>\n                </Row>\n\n                <Row><Col>\n\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Jumbotron>\n                                <h1>Hello to sorting visualisations</h1>\n                                <p>Click on the links to go see the visualisation.</p>\n                            </Jumbotron>\n                        </Route>\n                        <Route path=\"/bubble\" component={BubbleSort}/>\n                        <Redirect to=\"/\"/>\n                    </Switch>\n\n                </Col></Row>\n            </Container>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}