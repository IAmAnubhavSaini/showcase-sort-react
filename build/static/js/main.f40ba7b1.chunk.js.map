{"version":3,"sources":["DrawArray.tsx","ControlBox.tsx","BubbleSort.tsx","SelectionSort.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrawArray","props","array","a","b","done","end","heading","out","map","v","i","astyle","border","backgroundColor","bstyle","outline","style","margin","padding","display","Container","fluid","Row","Col","debug","shouldDebug","JSON","stringify","state","ControlBox","className","Form","Group","controlId","Label","Control","type","value","inputSize","min","max","onChange","e","updateRange","parseInt","target","visualisationSpeed","step","updateVisualisationSpeed","Check","label","setDebug","bubbleSortInit","size","original","Array","fill","_","Math","floor","random","j","compareI","compareJ","comparisons","swaps","BubbleSort","useState","setInputSize","setState","setVisualisationSpeed","useEffect","id","setTimeout","clearTimeout","reduce","c","Infinity","isSorted","bubbleSortStep","Jumbotron","href","selectionSortInit","SelectionSort","selectionSortStep","App","component","setComponent","ToRender","Greet","Navbar","bg","variant","Brand","Nav","Link","onClick","Badge","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f40ba7b1.chunk.js","sourcesContent":["import {Col, Container, Row} from \"react-bootstrap\";\nimport React from \"react\";\n\ninterface IDrawArray {\n    array: number[]\n    a: number\n    b: number\n    done: boolean\n    heading?: string\n    end?: boolean\n    debug?: { shouldDebug: boolean, state: any }\n}\n\nfunction DrawArray(props: IDrawArray) {\n    const {array, a, b, done, end = false, heading} = props;\n    const out = array.map((v: number, i: number) => {\n        const astyle = i === a ? {border: `medium solid #0f0`} : {backgroundColor: '#ddd'};\n        const bstyle = i === b ? {outline: `medium solid #f00`} : {backgroundColor: '#ddd'};\n\n\n        return (<span key={i} style={{\n            margin: \"0.5em\",\n            padding: \"1em\",\n            display: \"inline-block\",\n            ...astyle,\n            ...bstyle\n        }}>{v}</span>);\n    });\n    return (\n        <Container fluid>\n            <Row>\n                <Col><h3>{heading}</h3></Col>\n            </Row>\n            <Row>\n                <Col>\n                    <>\n                        {out}\n                    </>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {props?.debug?.shouldDebug ? JSON.stringify(props.debug.state, null, 4) : null}\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    {done && !end ? <span style={{\n                        margin: \"0.5em\",\n                        padding: \"1em\",\n                        backgroundColor: \"green\",\n                        display: \"inline-block\"\n                    }}>Done!</span> : ''}\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default DrawArray;","import {Col, Form, Row} from \"react-bootstrap\";\nimport React, {ChangeEvent} from \"react\";\n\nfunction ControlBox(props: any) {\n    return (\n\n        <Row>\n            <Col className=\"col-md-3\">\n                <Form>\n                    <Form.Group controlId=\"formInputSizeRange\">\n                        <Form.Label>Range (5-25)</Form.Label>\n                        <Form.Control type=\"range\" value={props.inputSize} min={5} max={25}\n                                      onChange={(e: ChangeEvent<HTMLInputElement>) => props.updateRange(parseInt(e.target.value))}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formVisualisationSpeedRange\">\n                        <Form.Label>Visualisation speed (100-2500) lower is faster</Form.Label>\n                        <Form.Control type=\"range\" value={props.visualisationSpeed} min={100} max={2500} step={250}\n                                      onChange={(e: ChangeEvent<HTMLInputElement>) => props.updateVisualisationSpeed(parseInt(e.target.value))}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDebugCheckbox\">\n                        <Form.Label>Debugging (check to see state)</Form.Label>\n                        <Form.Check type=\"checkbox\" label=\"Debug\" onChange={() => props.setDebug(!props.debug)}/>\n                    </Form.Group>\n                </Form>\n            </Col>\n        </Row>\n    );\n}\n\nexport default ControlBox;","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Container, Row, Col, Form, Jumbotron, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DrawArray from \"./DrawArray\";\nimport ControlBox from \"./ControlBox\";\n\ninterface IBubbleSortState {\n    original: number[]\n    array: number[]\n    i: number\n    j: number\n    compareI: number\n    compareJ: number\n    comparisons: number\n    swaps: number\n    done: boolean\n    size: number\n}\n\nfunction bubbleSortInit(size: number = 10): IBubbleSortState {\n    const original = Array(size).fill(0).map(_ => Math.floor(Math.random() * 100));\n    return {\n        original,\n        array: original.map((i: number) => i),\n        i: 0,\n        j: 1,\n        compareI: 0,\n        compareJ: 1,\n        comparisons: 0,\n        swaps: 0,\n        done: false,\n        size: size\n    };\n}\n\nfunction isSorted(array: number[]) {\n    return array.reduce((a: boolean, c: number, i: number) => a && c < (array[i + 1] || Infinity), true);\n}\n\nfunction bubbleSortStep(state: IBubbleSortState): IBubbleSortState {\n    let {array, i, j, compareI, compareJ, comparisons, swaps, original, size} = state;\n\n    if (compareJ > size - 1) {\n        compareI = 0;\n        compareJ = 1;\n        i++;\n    }\n\n    const a = array[compareI];\n    const b = array[compareJ];\n    if (a > b) {\n        swaps++;\n        array[compareI] = b;\n        array[compareJ] = a;\n    }\n    comparisons++;\n    compareI++;\n    compareJ++;\n\n    // bails out quicker. Not a real bubble sort. Watching bubble sort is punishment.\n    let done = isSorted(array) || i > size;\n    if (done) {\n        compareI = -1;\n        compareJ = -1;\n    }\n    return {...state, array, i, j, compareI, compareJ, comparisons, swaps, done, original};\n}\n\nfunction BubbleSort() {\n    const [inputSize, setInputSize] = useState(5);\n    const [state, setState] = useState(bubbleSortInit(inputSize));\n    const [visualisationSpeed, setVisualisationSpeed] = useState(500);\n    const [debug, setDebug] = useState(false);\n\n    useEffect(() => {\n        const id = setTimeout(() => {\n            if (state.done) {\n                clearTimeout(id);\n            } else {\n                setState(bubbleSortStep(state));\n            }\n\n        }, visualisationSpeed);\n        return () => clearTimeout(id);\n    });\n\n    function updateRange(value: number) {\n        setInputSize(value);\n        setState(bubbleSortInit(value));\n    }\n\n    function updateVisualisationSpeed(value: number) {\n        setVisualisationSpeed(value);\n        setState(bubbleSortInit(inputSize));\n    }\n\n\n    return (\n\n        <>\n            <Jumbotron>\n                <h1>Bubble sort</h1>\n                <p>Use the range slider to increase/decrease the number of numbers in bubble sort visualisation.</p>\n\n                <p>\n                    <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Learn more about bubble sort</a>\n                </p>\n            </Jumbotron>\n\n            <ControlBox inputSize={inputSize} updateRange={updateRange} debug={debug} setDebug={setDebug}\n                        visualisationSpeed={visualisationSpeed} updateVisualisationSpeed={updateVisualisationSpeed}/>\n\n            <Row>\n                <Col>\n                    <DrawArray\n                        array={state.original}\n                        a={-1} b={-1}\n                        done={state.done}\n                        heading={\"Initial state of the array\"}\n                        end={true}/>\n                    <hr/>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <DrawArray array={state.array} a={state.compareI - 1} b={state.compareJ - 1} done={state.done}\n                               heading={\"Working\"} debug={({shouldDebug: debug, state})}/>\n                </Col>\n            </Row>\n        </>\n\n    );\n}\n\nexport default BubbleSort;\n\n\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Container, Row, Col, Form, Jumbotron, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DrawArray from \"./DrawArray\";\nimport ControlBox from \"./ControlBox\";\n\ninterface ISelectionSortState {\n    original: number[]\n    array: number[]\n    i: number\n    j: number\n    compareI: number\n    compareJ: number\n    comparisons: number\n    swaps: number\n    done: boolean\n    size: number\n}\n\nfunction selectionSortInit(size: number = 10): ISelectionSortState {\n    const original = Array(size).fill(0).map(_ => Math.floor(Math.random() * 100));\n    return {\n        original,\n        array: original.map((i: number) => i),\n        i: 0,\n        j: 1,\n        compareI: 0,\n        compareJ: 1,\n        comparisons: 0,\n        swaps: 0,\n        done: false,\n        size: size\n    };\n}\n\nfunction isSorted(array: number[]) {\n    return array.reduce((a: boolean, c: number, i: number) => a && c < (array[i + 1] || Infinity), true);\n}\n\nfunction selectionSortStep(state: ISelectionSortState): ISelectionSortState {\n    let {array, i, j, compareI, compareJ, comparisons, swaps, original, size} = state;\n\n    if (compareJ > size - 1) {\n        //swap first\n        const a = array[i];\n        array[i] = array[compareI];\n        array[compareI] = a;\n        swaps++;\n\n        // prepare for next iteration of the outer loop\n        i++;\n        compareI = i;\n        compareJ = i + 1;\n    }\n\n    if (array[compareI] > array[compareJ]) {\n        compareI = compareJ;\n    }\n\n    compareJ++;\n    comparisons++;\n\n    // bails out quicker. Not a real selection sort. Watching selection sort is punishment.\n    let done = isSorted(array) || i > size;\n    if (done) {\n        compareI = -1;\n        compareJ = -1;\n    }\n    return {...state, array, i, j, compareI, compareJ, comparisons, swaps, done, original};\n}\n\nfunction SelectionSort() {\n    const [inputSize, setInputSize] = useState(5);\n    const [state, setState] = useState(selectionSortInit(inputSize));\n    const [visualisationSpeed, setVisualisationSpeed] = useState(500);\n    const [debug, setDebug] = useState(false);\n\n    useEffect(() => {\n        const id = setTimeout(() => {\n            if (state.done) {\n                clearTimeout(id);\n            } else {\n                setState(selectionSortStep(state));\n            }\n\n        }, visualisationSpeed);\n        return () => clearTimeout(id);\n    });\n\n    function updateRange(value: number) {\n        setInputSize(value);\n        setState(selectionSortInit(value));\n    }\n\n    function updateVisualisationSpeed(value: number) {\n        setVisualisationSpeed(value);\n        setState(selectionSortInit(inputSize));\n    }\n\n    return (\n\n        <>\n            <Jumbotron>\n                <h1>Selection sort</h1>\n                <p>Use the range slider to increase/decrease the number of numbers in selection sort visualisation.</p>\n\n                <p>\n                    <a href=\"https://en.wikipedia.org/wiki/Selection_sort\">Learn more about selection sort</a>\n                </p>\n            </Jumbotron>\n\n            <ControlBox inputSize={inputSize} updateRange={updateRange} debug={debug} setDebug={setDebug}\n                        visualisationSpeed={visualisationSpeed} updateVisualisationSpeed={updateVisualisationSpeed}/>\n            <Row>\n                <Col>\n                    <hr/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <DrawArray\n                        array={state.original}\n                        a={-1} b={-1}\n                        done={state.done}\n                        heading={\"Initial state of the array\"}\n                        end={true}/>\n                    <hr/>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <DrawArray array={state.array} a={state.compareI} b={state.compareJ - 1} done={state.done}\n                               heading={\"Working\"} debug={({shouldDebug: debug, state})}/>\n                </Col>\n            </Row>\n        </>\n\n    );\n}\n\nexport default SelectionSort;\n\n\n","import React, {useState} from 'react';\nimport {Container, Row, Col, Nav, FormControl, Form, Navbar, Button, Jumbotron, Badge} from 'react-bootstrap';\nimport BubbleSort from \"./BubbleSort\";\nimport SelectionSort from \"./SelectionSort\";\n\nfunction App() {\n    const [component, setComponent] = useState('Greet');\n\n    const ToRender = component === 'Greet' ? Greet :\n        component === 'BubbleSort' ? BubbleSort :\n            component === 'SelectionSort' ? SelectionSort : Greet;\n\n\n    return (\n\n        <Container fluid className=\"App\">\n            <Row>\n                <Col>\n                    <Navbar bg=\"danger\" variant=\"dark\">\n                        <Navbar.Brand href=\"/\">Sorting visualisations</Navbar.Brand>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link onClick={() => setComponent('BubbleSort')}>Bubble</Nav.Link>\n                            <Nav.Link onClick={() => setComponent('SelectionSort')}>Selection</Nav.Link>\n                            {/*<Nav.Link href=\"/insertion\">Insertion</Nav.Link>*/}\n                        </Nav>\n                        <Badge variant={\"light\"}>v0.7.0</Badge>\n                    </Navbar>\n                </Col>\n            </Row>\n\n            <Row><Col>\n                <ToRender/>\n            </Col></Row>\n        </Container>\n    );\n}\n\nexport default App;\n\nfunction Greet() {\n    return (<Jumbotron>\n        <h1>Hello to sorting visualisations</h1>\n        <p>Click on the links to go see the visualisation.</p>\n    </Jumbotron>);\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}